'use strict';

if (!config.tasks.css ||Â !config.tasks.scss) {
	return false;
}

let fs   = require('fs');
let read = require('fs-readdir-recursive');

let paths = {
	all: config.root.watch.map(value => path.join(config.root.base, value, '/_all.scss')),
	allsub: config.root.watch.map(value => path.join(config.root.base, value, '/_allsub.scss'))
};

// Add a banner to warn users
let banner = '// DO NOT EDIT DIRECTLY!\n// Generated by gulpfile.js/tasks/scss.js\n\n';

// Hack the ability to import directories in Sass
// Import the whole directory with @import "foobar/all";
function scss(callback) {
	paths.all.forEach((folder) => {
		glob(folder, (error, files) => {
			files.forEach((allFile) => {
				fs.writeFileSync(allFile, banner);
				let directory = path.dirname(allFile);
				// Exclude all files with "_"
				let partials = fs.readdirSync(directory).filter(file => file.indexOf('_') !== 0 && path.extname(file) === '.scss');
				// Append import statements for each partial
				partials.forEach((partial) => {
					partial = partial.replace('.scss', '');
					fs.appendFileSync(allFile, '@import \'' + partial + '\';\n');
				});
			});
		});
	});

	paths.allsub.forEach((folder) => {
		glob(folder, (error, files) => {
			files.forEach((allFile) => {
				fs.writeFileSync(allFile, banner);
				let directory = path.dirname(allFile);
				let partials = read(directory, (file, numberOfFiles, files) => {
					let check = file[0] !== '_' && file[0] !== '.' && (!path.extname(file) || path.extname(file) === '.scss');
					// in allsub.scss files, ignore root directory
					if (files.indexOf('_allsub.scss') !== -1) {
						if (path.extname(file)) {
							return file[0] !== '_' && file[0] !== '.' && !path.extname(file);
						}
					}
					return check;
				});
				// Append import statements for each partial
				partials.forEach((partial) => {
					partial = partial.replace('.scss', '').replace(/\\/g, '/');
					fs.appendFileSync(allFile, `@import '${partial}';\n`);
				});
			});
		});
	});

	if (typeof callback == 'function') {
		callback();
	} else {
		return true;
	}
}

module.exports = scss;
